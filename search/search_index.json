{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-passportjs","title":"What is Passport.js?","text":"<p>Passport JS is a widely used middleware for handling authentication in Node.js web applications.</p> <p>It can help you save a lot of time and effort in implementing authentication and managing user sessions in your own web applications.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is intended for developers who are new to Passport.js and want to learn how to use it to implement authentication in their web applications.</p>"},{"location":"#getting-started-with-passportjs","title":"Getting Started with Passport.js","text":"<p>In this documentation, we will be learning how to use Passport.js to implement authentication for a simple login page.</p> <p>Login Form Tutorial</p>"},{"location":"pages/db-setup/","title":"Creating a User Database","text":""},{"location":"pages/db-setup/#overview","title":"Overview","text":"<p>This section will guide you through creating a sample database with users for our project.</p>"},{"location":"pages/db-setup/#creating-a-mental-model","title":"Creating a mental model","text":"<p>Before we start creating the database, we need to create a mental model of a user. This will help us create a database that is easy to work with.</p> <p>In our case, we want to store the following data:</p> <ul> <li>username</li> <li>password</li> </ul> <p>We will also have a unique id for each user. This will allow us to easily identify a user each id is unique to a specific user.</p>"},{"location":"pages/db-setup/#create-the-database","title":"Create the database","text":"<p>Now that we have a mental model of a user, we can start creating the database.</p>"},{"location":"pages/db-setup/#1-create-a-userdbjs-file","title":"1. Create a <code>userDB.js</code> file","text":"<p>For simplicity sake, we will create a database in a file called <code>userDB.js</code>. This will allow us to easily access the database without having to set up a real database server. This file should be in the root directory.</p>"},{"location":"pages/db-setup/#2-add-sample-data-to-the-database","title":"2. Add sample data to the database","text":"<p>Inside the <code>userDB.js</code> file, we will create an array of fake users.</p> <p>Based on our mental model, we will create a user object with the following properties:</p> <ul> <li>username</li> <li>password</li> </ul> <p>This will allow us to test our login feature.</p> <pre><code>const users = [\n{\nid: 1,\nusername: \"John\",\npassword: \"password\",\n},\n{\nid: 2,\nusername: \"Jane\",\npassword: \"password\",\n},\n];\n</code></pre> <p>This function will return the user object if the username and password match. Otherwise, it will return <code>undefined</code>. In the next section we will be creating functions to search the database for a user.</p> <p>Don't store passwords in plain text</p> <p>In a real application, you would not store the password in plain text. You would use a hashing algorithm to hash the password. This will make it more difficult for someone to get the password. We will not be covering hashing in this tutorial to keep things simple.</p>"},{"location":"pages/db-setup/#query-the-database","title":"Query the database","text":"<p>Now that we have a database, we need to be able to query it. We want to be able to check if the username and password are correct. So we will create queries that will allow us to verify the username and password.</p>"},{"location":"pages/db-setup/#1-add-a-function-that-will-check-if-the-username-and-password-are-correct","title":"1. Add a function that will check if the username and password are correct.","text":"<p>At the bottom of the <code>userDB.js</code> file, add the following function:</p> <pre><code>const getUserByUsername = (username) =&gt; {\nreturn users.find((user) =&gt; user.username === username);\n};\n</code></pre> <p>This function will return the user object if the username matches a user in the database. Otherwise, it will return <code>undefined</code>.</p>"},{"location":"pages/db-setup/#2-add-a-function-that-will-get-a-user-by-id","title":"2. Add a function that will get a user by id","text":"<p>At the bottom of the <code>userDB.js</code> file, add the following function:</p> <pre><code>const getUserById = (id) =&gt; {\nreturn users.find((user) =&gt; user.id === id);\n};\n</code></pre> <p>This function will return the user object if the id matches. Otherwise, it will return <code>undefined</code>.</p>"},{"location":"pages/db-setup/#3-export-the-functions","title":"3. Export the functions","text":"<p>At the bottom page put the following code:</p> <pre><code>module.exports = { getUserByUsername, getUserById };\n</code></pre> <p>This will allow us to use the functions in our <code>app.js</code> file.</p> <p>The final file should look something like the following:</p> <pre><code>const users = [\n{\nid: 1,\nusername: \"John\",\npassword: \"password\",\n},\n{\nid: 2,\nusername: \"Jane\",\npassword: \"password\",\n},\n];\nconst getUserByUsername = (username) =&gt; {\nreturn users.find((user) =&gt; user.username === username);\n};\nconst getUserById = (id) =&gt; {\nreturn users.find((user) =&gt; user.id === id);\n};\nmodule.exports = { getUserByUsername, getUserById };\n</code></pre>"},{"location":"pages/db-setup/#4-import-the-function-that-will-verify-username-and-password-in-appjs","title":"4. Import the function that will verify username and password in <code>app.js</code>","text":"<p>In your <code>app.js</code>, at the top of the page before the index route, put the following code:</p> <pre><code>...\n//Import the database functions here\nconst db = require(\"./userDB\");\napp.get(\"/\", (req, res) =&gt; { // &lt;--- This is the index route\nres.render(\"index\");\n});\n...\n</code></pre> <p>This will allow us to use the our database querying functions in our <code>app.js</code> file. We will be using these functions to verify the username and password.</p>"},{"location":"pages/db-setup/#conclusion","title":"Conclusion","text":"<p>In this section, we created a database that will store our users. We also created a function that will allow us to query the database and check if a user's username and password is correct.</p> <p>In the next section, we will create the login form page that will allow users to log in to our website using a username and password.</p>"},{"location":"pages/express-setup/","title":"Setting up Express","text":""},{"location":"pages/express-setup/#overview","title":"Overview","text":"<p>This section will guide you through the process of setting up Express for our project.</p> <p>Express is a Node.js web application framework that provides a robust set of features for web and mobile applications.</p> <p>To learn more about Express, visit the official Express website.</p>"},{"location":"pages/express-setup/#setting-up-express","title":"Setting up Express","text":"<p>In this section we will be creating the Express app and create the homepage.</p>"},{"location":"pages/express-setup/#1-create-an-express-app","title":"1. Create an Express app","text":"<p>Put the following code in the <code>app.js</code> file:</p> <pre><code>const express = require(\"express\");\nconst app = express();\napp.set(\"view engine\", \"ejs\");\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(\"public\"));\napp.get(\"/\", (req, res) =&gt; {\nres.render(\"index\");\n});\napp.get(\"/login\", (req, res) =&gt; {\nres.render(\"login\");\n});\napp.listen(3000, () =&gt; {\nconsole.log(\"Login App listening on port 3000!\");\n});\n</code></pre> <p>This will create a basic Express app that listens on port 3000 and renders the <code>index.ejs</code> file when the <code>/</code> route is requested. It also renders the <code>login.ejs</code> file, which will be the login page when the <code>/login</code> route is requested.</p> <p>The <code>login.ejs</code> file will created later in the tutorial.</p>"},{"location":"pages/express-setup/#2-edit-the-indexejs-file","title":"2. Edit the <code>index.ejs</code> file","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"/style.css\" /&gt;\n&lt;title&gt;Login&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Not Logged In&lt;/h1&gt;\n&lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This will create a simple home page that will be rendered when the <code>/</code> route is requested. There is also a link to the <code>/login</code> route. Before we create the <code>login.ejs</code> file, let's create a sample database with users to test our login form.</p>"},{"location":"pages/express-setup/#conclusion","title":"Conclusion","text":"<p>In this section we set up Express for our project. We created a basic Express app that listens on port 3000 and renders the <code>index.ejs</code> file when the <code>/</code> route is requested. It also renders the <code>login.ejs</code> file when the <code>/login</code> route is requested.</p> <p>In the next section, we will create a sample database with users to test our login form.</p>"},{"location":"pages/finished-example/","title":"Overview","text":"<p>This is a finished example of the login app using passport.js that we built in this documentation.</p>"},{"location":"pages/finished-example/#appjs","title":"app.js","text":"<pre><code>const express = require(\"express\");\nconst db = require(\"./userDB\");\nconst passport = require(\"passport\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\nconst session = require(\"express-session\");\nconst app = express();\napp.set(\"view engine\", \"ejs\");\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(\"public\"));\napp.use(\nsession({\nsecret: \"secret\",\nresave: false,\nsaveUninitialized: true,\n})\n);\napp.use(passport.initialize());\napp.use(passport.session());\npassport.use(\nnew LocalStrategy((username, password, done) =&gt; {\nconst user = db.getUserByUsername(username);\nif (!user) {\nreturn done(null, false, { message: \"Incorrect username\" });\n} else if (user.password !== password) {\nreturn done(null, false, { message: \"Incorrect password\" });\n}\nreturn done(null, user);\n})\n);\npassport.serializeUser((user, done) =&gt; {\ndone(null, user.id);\n});\npassport.deserializeUser((id, done) =&gt; {\nconst user = db.getUserById(id);\nif (user) {\ndone(null, user);\n} else {\ndone(null, false, { message: \"User not found\" });\n}\n});\napp.use((req, res, next) =&gt; {\nres.locals.currentLoggedInUser = req.user;\nnext();\n});\napp.get(\"/\", (req, res) =&gt; {\nres.render(\"index\");\n});\napp.get(\"/login\", (req, res) =&gt; {\nres.render(\"login\");\n});\napp.post(\n\"/login\",\npassport.authenticate(\"local\", {\nsuccessRedirect: \"/\",\nfailureRedirect: \"/login\",\n})\n);\napp.listen(3000, () =&gt; {\nconsole.log(\"Login App listening on port 3000!\");\n});\napp.get(\"/logout\", (req, res) =&gt; {\nreq.logout((err) =&gt; console.log(err));\nres.redirect(\"/\");\n});\n</code></pre>"},{"location":"pages/finished-example/#indexejs","title":"index.ejs","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"/style.css\" /&gt;\n&lt;title&gt;Login&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;% if (!currentLoggedInUser) { %&gt;\n        &lt;h1&gt;Not Logged In&lt;/h1&gt;\n&lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n&lt;% } else { %&gt;\n        &lt;h1&gt;Welcome &lt;%= currentLoggedInUser.username %&gt;&lt;/h1&gt;\n&lt;a href=\"/logout\"&gt;Logout&lt;/a&gt;\n&lt;% } %&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"pages/finished-example/#loginejs","title":"login.ejs","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Login&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Login&lt;/h1&gt;\n&lt;form action=\"/login\" method=\"POST\"&gt;\n&lt;label for=\"username\"&gt;Username&lt;/label&gt;\n&lt;input type=\"text\" name=\"username\" id=\"username\" /&gt;\n&lt;label for=\"password\"&gt;Password&lt;/label&gt;\n&lt;input type=\"password\" name=\"password\" id=\"password\" /&gt;\n&lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"pages/glossary/","title":"Glossary","text":""},{"location":"pages/glossary/#authentication","title":"Authentication","text":"<p>The process of verifying the identity of a user. This is done by asking the user for a username and password. The server then checks the database to see if the username and password match. If they do, the user is logged in.</p>"},{"location":"pages/glossary/#cookie","title":"Cookie","text":"<p>A small piece of data that is stored on the user's browser. It is used to store information about the user. This information can be used to identify the logged in user when they visit the website after leaving it.</p>"},{"location":"pages/glossary/#project-dependencies","title":"Project Dependencies","text":"<p>A package that is required by the project. These packages are installed using the:</p> <pre><code>npm install &lt;package name&gt;\n</code></pre>"},{"location":"pages/glossary/#query","title":"Query","text":"<p>Request to the database to get some data. This data can be anything from a single row to all the rows in a table.</p>"},{"location":"pages/glossary/#session","title":"Session","text":"<p>A way to store data on the server that is associated with a specific user. This data is stored in a cookie on the user's browser.</p>"},{"location":"pages/glossary/#strategy","title":"Strategy","text":"<p>A way to authenticate a user. For example, you can use a username and password or a social media account to log users in to a website.</p>"},{"location":"pages/glossary/#rootroot-directory","title":"Root/Root directory","text":"<p>The directory that contains all the files for the project. In our case, it is <code>login-form-tutorial</code>.</p>"},{"location":"pages/logging-in/","title":"Logging in","text":""},{"location":"pages/logging-in/#overview","title":"Overview","text":"<p>We will now try out the login feature that we have created.</p>"},{"location":"pages/logging-in/#testing-the-login-feature","title":"Testing the login feature","text":"<p>Start the server by running the following command:</p> <pre><code>npm start\n</code></pre>"},{"location":"pages/logging-in/#1-open-the-browser-and-go-to-httplocalhost3000login","title":"1. Open the browser and go to <code>http://localhost:3000/login</code>.","text":""},{"location":"pages/logging-in/#2-enter-a-username-and-password","title":"2. Enter a username and password.","text":"<p>Heres a list of users we created from the previous section when we created the database:</p> <pre><code>const users = [\n{\nusername: \"John\",\npassword: \"password\",\n},\n{\nusername: \"Jane\",\npassword: \"password\",\n},\n];\n</code></pre>"},{"location":"pages/logging-in/#3-click-the-login-button","title":"3. Click the <code>Login</code> button.","text":"<ul> <li>If the username and password are correct, you will be redirected to the homepage.</li> <li>If the username and password are incorrect, you will be redirected to the login page.</li> </ul> <p>You may have noticed that you were redirected to the homepage, but the page still says <code>Not Logged In</code> and <code>Login</code>. This is because we have not implemented the logic to display the user's name and a logout button.</p>"},{"location":"pages/logging-in/#4-displaying-the-users-name-on-the-homepage","title":"4. Displaying the user's name on the homepage","text":"<p>We will now display the currently logged in user on the homepage. To do this, we will need to access the currently logged in user in the EJS page.</p> <p>In the app.js file, we can create a middleware function that will set the currently logged in user to a variable that we can access in our EJS page.</p> <p>Put the following code after where the deserializeUser function is defined:</p> <pre><code>...\npassport.deserializeUser((id, done) =&gt; {\nconst user = db.getUserById(id);\nif (user) {\ndone(null, user);\n} else {\ndone(null, false, { message: \"User not found\" });\n}\n});\napp.use((req, res, next) =&gt; {\nres.locals.currentLoggedInUser = req.user;\nnext();\n});\n...\n</code></pre> <p>Using the <code>res.locals</code> object, we can set a variable that we can access in our EJS page. In this case, we are setting the <code>currentLoggedInUser</code> variable to the <code>req.user</code> object.</p> <p>How does <code>res.locals</code> work?</p> <p>In Express, <code>res.locals</code> is an object that is available throughout the lifecycle of a request. It is used to pass data from the server to the views that are rendered during that request-response cycle.</p> <p>To learn more about <code>res.locals</code>, check out the Express documentation.</p> <p>In the index.ejs file, we can now display the user's name if the user is logged in. Otherwise, we will display <code>Not Logged In</code> and a link to the login page.</p> <p>Replace the contents of the index.ejs file with the following code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"/style.css\" /&gt;\n&lt;title&gt;Login&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;% if (!currentLoggedInUser) { %&gt;\n        &lt;h1&gt;Not Logged In&lt;/h1&gt;\n&lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n&lt;% } else { %&gt;\n        &lt;h1&gt;Welcome &lt;%= currentLoggedInUser.username %&gt;&lt;/h1&gt;\n&lt;a href=\"/logout\"&gt;Logout&lt;/a&gt;\n&lt;% } %&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"pages/logging-in/#try-it-out","title":"Try it out","text":"<p>Try logging in and out and see if the user's name is displayed on the homepage.</p> <p> </p> Homepage with user's name"},{"location":"pages/logging-in/#conclusion","title":"Conclusion","text":"<p>In this section, we created a login form that will allow users to log in to our website using a username and password.</p> <p>You might have noticed that when we click the logout link it doesn't work.</p> <p>In the next section, we will create a logout feature that will allow users to log out of our website.</p>"},{"location":"pages/login-form-tutorial/","title":"Login Form Tutorial","text":""},{"location":"pages/login-form-tutorial/#overview","title":"Overview","text":"<p>In this tutorial, we will be creating a login form using the following technologies:</p> <ul> <li>Node.js</li> <li>Express.js</li> <li>Express Session</li> <li>Passport.js</li> <li>EJS</li> </ul> <p>Heres a preview of what we will be building:</p> <p> </p> Homepage (Not Logged in) <p> </p> Login Page <p> </p> Homepage (Logged in) <p>The aim of this tutorial is to help you learn how to integrate Passport.js to authenticate users in your own web applications.</p>"},{"location":"pages/login-form-tutorial/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js installed.</li> <li>A code editor like Visual Studio Code installed.</li> <li>Basic knowledge of HTML and CSS - how to use them to build a simple web page.</li> <li>Basic knowledge of npm.</li> <li>Basic knowledge of Node.js and Express.js - how to create routes and knowledge of how to create and use Express middlewares.</li> <li>Basic knowledge of EJS - how to use it to render HTML templates.</li> <li>Abilty to use the terminal to run commands.</li> </ul>"},{"location":"pages/login-form-tutorial/#project-structure","title":"Project Structure","text":"<p>The project structure will be as follows:</p> <pre><code>|-- login-form-tutorial              # Root Directory\n|-- public                       # Public Directory\n|-- style.css            # Style.css File\n|-- views                        # Views Directory\n|-- index.ejs            # Homepage Ejs File\n|-- login.ejs            # Login Page Ejs File\n| -- app.js                      # Express App File\n|-- package.json                 # Package.json File\n|-- node_modules                 # Node Modules Directory\n</code></pre>"},{"location":"pages/login-form-tutorial/#conclusion","title":"Conclusion","text":"<p>In this section we looked at the project structure and the technologies that we will be using in this tutorial.</p> <p>In the next section, we will be setting up the project directory and installing the required libraries.</p>"},{"location":"pages/login-form/","title":"Creating a Login Form","text":""},{"location":"pages/login-form/#overview","title":"Overview","text":"<p>This section will guide you through the process of setting up the login form page for our project.</p> <p>Heres a preview of what we will be building:</p> <p> </p> Login page"},{"location":"pages/login-form/#setting-up-the-login-page","title":"Setting up the login page","text":"<p>In this section we will be setting up the login page for our project.</p>"},{"location":"pages/login-form/#1-add-the-login-get-route-to-appjs","title":"1. Add the <code>/login</code> GET route to <code>app.js</code>","text":"<p>If have already made a login route in <code>app.js</code> from the previous section, you can skip this step. Put the following code at the bottom of the <code>app.js</code> file, just before the <code>app.listen</code> function:</p> <pre><code>...\napp.get(\"/login\", (req, res) =&gt; { //&lt;--- Put login route here\nres.render(\"login\");\n});\napp.listen(3000, () =&gt; {\nconsole.log(\"Login App listening on port 3000!\");\n});\n</code></pre> <p>This will add a <code>GET</code> route to the <code>/login</code> route in <code>app.js</code>. This will display the <code>login.ejs</code> file when the <code>/login</code> route is requested.</p>"},{"location":"pages/login-form/#2-editing-the-loginejs-file","title":"2. Editing the <code>login.ejs</code> file","text":"<p>In the views folder, in the <code>login.ejs</code> file, we will create a simple login page that will be rendered when the <code>/login</code> route is requested. The form will send a <code>POST</code> request to the <code>/login</code> route.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Login&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Login&lt;/h1&gt;\n&lt;form action=\"/login\" method=\"POST\"&gt;\n&lt;label for=\"username\"&gt;Username&lt;/label&gt;\n&lt;input type=\"text\" name=\"username\" id=\"username\" /&gt;\n&lt;label for=\"password\"&gt;Password&lt;/label&gt;\n&lt;input type=\"password\" name=\"password\" id=\"password\" /&gt;\n&lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"pages/login-form/#3-add-the-login-post-route-to-appjs","title":"3. Add the <code>/login</code> POST route to <code>app.js</code>","text":"<p>Put the following code at the bottom of the <code>app.js</code> file, just before the <code>app.listen</code> function:</p> <pre><code>app.post(\"/login\", (req, res) =&gt; {\nconst { username, password } = req.body;\nconsole.log({ username, password });\nres.redirect(\"/login\");\n});\n</code></pre> <p>This will add a <code>POST</code> route to the <code>/login</code> route in <code>app.js</code>.</p> <p>For now we are just logging the username and password to the console to make sure that the form is working.</p> <p>The final file should look like something like this:</p> <pre><code>const express = require(\"express\");\nconst db = require(\"./userDB\");\nconst app = express();\napp.set(\"view engine\", \"ejs\");\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(\"public\"));\napp.get(\"/\", (req, res) =&gt; {\nres.render(\"index\");\n});\napp.get(\"/login\", (req, res) =&gt; {\nres.render(\"login\");\n});\napp.listen(3000, () =&gt; {\nconsole.log(\"Login App listening on port 3000!\");\n});\napp.post(\"/login\", (req, res) =&gt; {\nconst { username, password } = req.body;\nconsole.log({ username, password });\nres.redirect(\"/login\");\n});\n</code></pre>"},{"location":"pages/login-form/#conclusion","title":"Conclusion","text":"<p>In this section we looked at how to create a simple login page using EJS.</p> <p>In the next section, we will be adding the login functionality to the login page.</p>"},{"location":"pages/logout/","title":"Logging out","text":""},{"location":"pages/logout/#overview","title":"Overview","text":"<p>In this section, we will be creating a logout feature for our project, which will allow us to logout after clicking the logout button.</p>"},{"location":"pages/logout/#creating-a-logout-route","title":"Creating a logout route","text":"<p>To create a logout route, add the following code after the POST login route in our <code>app.js</code> file:</p> <pre><code>app.get(\"/logout\", (req, res) =&gt; {\nreq.logout((err) =&gt; console.log(err));\nres.redirect(\"/\");\n});\n</code></pre> <p>The <code>req.logout()</code> function is provided by Passport. It will remove the user's session and log them out.</p>"},{"location":"pages/logout/#try-it-out","title":"Try it out","text":"<p>Now that we have created a logout route, we can test it out by logging in and then logging out.</p>"},{"location":"pages/logout/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have successfully created a login form using Passport's local strategy.</p> <p>You should now be able to implement a login feature to your Node.js web application using Passport.</p>"},{"location":"pages/logout/#next-steps","title":"Next Steps","text":"<p>To learn more about Passport and other strategies, check out the Passport documentation.</p> <p>To view the full code for this project, check out the GitHub repository.</p>"},{"location":"pages/passport-local/","title":"Configuring Passport","text":""},{"location":"pages/passport-local/#overview","title":"Overview","text":"<p>Now that we are finish setting up the login form page, we can start working on the actual login feature that will log users in.</p>"},{"location":"pages/passport-local/#login-flow","title":"Login Flow","text":"<p>To login a user, we need to check if the username and password are correct.</p> <ul> <li>If they are correct, we will store the user's information in the session.</li> <li>If they are incorrect, we will redirect the user back to the login page.</li> </ul> <p>How does a session work?</p> <p>When a user logs in, we will store their information in the session. This information will be stored in a cookie on the user's browser. When the user visits the website again, the cookie will be sent to the server. The server will then use the information in the cookie to identify the user. This is how we can keep track of the user's session. The user will be logged in until they log out or the session expires.</p>"},{"location":"pages/passport-local/#setting-up-passport-local-strategy","title":"Setting up Passport Local Strategy","text":""},{"location":"pages/passport-local/#what-is-a-strategy","title":"What is a strategy?","text":"<p>A strategy is a way to authenticate a user. The Passport library contains many different strategies that can be used to authenticate a user.</p> <p>For example, you can use a username and password or a social media account to log users in to a website.</p> <p>For this project, we will be using the Passport Local Strategy. This strategy will allow us to authenticate users using a username and password.</p>"},{"location":"pages/passport-local/#installing-passport","title":"Installing Passport","text":"<p>To install Passport, Passport's Local Strategy and Express Session run the following command in the terminal:</p> <pre><code>npm install passport passport-local express-session\n</code></pre> <p>This will install Passport and Passport's Local Strategy. We will also need to install the <code>express-session</code> package to store the user's session data. In the next section, we will learn how to set up Passport.</p>"},{"location":"pages/passport-local/#setting-up-passport","title":"Setting up Passport","text":"<p>Now that we have installed the required packages, we can start setting up Passport.</p>"},{"location":"pages/passport-local/#1-require-the-packages-in-appjs","title":"1. Require the packages in <code>app.js</code>","text":"<pre><code>....\napp.use(express.static(\"public\"));\nconst db = require(\"./userDb\");\n// Require Passport and Express Session here\nconst passport = require(\"passport\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\nconst session = require(\"express-session\");\n...\n</code></pre>"},{"location":"pages/passport-local/#2-set-up-express-session","title":"2. Set up Express Session","text":"<p>Put the following code after where you required the <code>express-session</code> package.</p> <pre><code>...\nconst passport = require(\"passport\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\nconst session = require(\"express-session\");\n// Initialize Express Session\napp.use(\nsession({\nsecret: \"secret\",\nresave: false,\nsaveUninitialized: true,\n})\n);\n...\n</code></pre> <p>This intializes the express session middleware which will be used to store the user's session data.</p> <p>For more information on how to configure the express session middleware and the different options, check out the Express Session documentation.</p>"},{"location":"pages/passport-local/#3-initialize-passport","title":"3. Initialize Passport","text":"<p>After the express session middleware, put the following code:</p> <pre><code>// Initialize Passport\napp.use(passport.initialize());\napp.use(passport.session());\n</code></pre> <p>The <code>passport.initialize()</code> middleware will be used to initialize Passport. The <code>passport.session()</code> middleware will be used to persist login sessions. This will allow Passport to restore the user's logged in status across page refreshes.</p>"},{"location":"pages/passport-local/#4-configure-passport","title":"4. Configure Passport","text":"<p>After the <code>passport.session()</code> middleware, put the following code:</p> <pre><code>// Configure Passport Local Strategy\npassport.use(\nnew LocalStrategy((username, password, done) =&gt; {\nconst user = db.getUserByUsername(username);\nif (!user) {\nreturn done(null, false, { message: \"Incorrect username\" });\n} else if (user.password !== password) {\nreturn done(null, false, { message: \"Incorrect password\" });\n}\nreturn done(null, user);\n})\n);\n</code></pre> <p>This will configure Passport to use the Local Strategy. The <code>(username, password, done)</code> is a verify function will be used to check if the username and password are correct.</p> <ul> <li>If they are correct, the <code>done</code> function will be called with the user's information.</li> <li>If they are incorrect, the <code>done</code> function will be called with <code>false</code> and a message.</li> </ul>"},{"location":"pages/passport-local/#5-add-the-passportauthenticate-middleware-to-the-login-route","title":"5. Add the passport.authenticate middleware to the login route","text":"<p>After the previous function configuring the local strategy, replace the POST login route with the following code:</p> <pre><code>// Login Route\napp.post(\n\"/login\",\npassport.authenticate(\"local\", {\nsuccessRedirect: \"/\",\nfailureRedirect: \"/login\",\n})\n);\n</code></pre> <p>This will add the <code>passport.authenticate</code> middleware to the login route. This middleware will call the verfiy function we configured earlier for the local strategy.</p> <ul> <li>The <code>successRedirect</code> will be called if the user's username and password are correct.</li> <li>The <code>failureRedirect</code> will be called if the user's username and password are incorrect.</li> </ul>"},{"location":"pages/passport-local/#6-serialize-and-deserialize-user","title":"6. Serialize and Deserialize User","text":"<ul> <li>Serialize means to store the user's data in the session.</li> <li>Deserialize means to get the user's data from the session.</li> </ul> <p>Put the following code right after where you configured the local strategy:</p> <pre><code>// Serialize User\npassport.serializeUser((user, done) =&gt; {\ndone(null, user.id);\n});\n// Deserialize User\npassport.deserializeUser((id, done) =&gt; {\nconst user = db.getUserById(id);\nif (user) {\ndone(null, user);\n} else {\ndone(null, false, { message: \"User not found\" });\n}\n});\n</code></pre> <p>The <code>serializeUser</code> and <code>deserializeUser</code> functions are used to store the user's session data.</p> <p>Heres how it works:</p> <ul> <li> <p>The serialize user function will be called when the user logs in. It will store the user's id in the session.</p> </li> <li> <p>The deserialize user function will be called when the user visits the website again. It will get the user's information from the database using the id stored in the session.</p> </li> </ul> <p>The <code>done</code> function here is used to tell Passport that the user has been serialized or deserialized.</p> <p>The final file should look like this:</p> <pre><code>const express = require(\"express\");\nconst db = require(\"./userDB\");\nconst passport = require(\"passport\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\nconst session = require(\"express-session\");\nconst app = express();\napp.set(\"view engine\", \"ejs\");\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(\"public\"));\napp.use(\nsession({\nsecret: \"secret\",\nresave: false,\nsaveUninitialized: true,\n})\n);\napp.use(passport.initialize());\napp.use(passport.session());\npassport.use(\nnew LocalStrategy((username, password, done) =&gt; {\nconst user = db.getUserByUsername(username);\nif (!user) {\nreturn done(null, false, { message: \"Incorrect username\" });\n} else if (user.password !== password) {\nreturn done(null, false, { message: \"Incorrect password\" });\n}\nreturn done(null, user);\n})\n);\npassport.serializeUser((user, done) =&gt; {\ndone(null, user.id);\n});\npassport.deserializeUser((id, done) =&gt; {\nconst user = db.getUserById(id);\nif (user) {\ndone(null, user);\n} else {\ndone(null, false, { message: \"User not found\" });\n}\n});\napp.get(\"/\", (req, res) =&gt; {\nres.render(\"index\");\n});\napp.get(\"/login\", (req, res) =&gt; {\nres.render(\"login\");\n});\napp.post(\n\"/login\",\npassport.authenticate(\"local\", {\nsuccessRedirect: \"/\",\nfailureRedirect: \"/login\",\n})\n);\napp.listen(3000, () =&gt; {\nconsole.log(\"Login App listening on port 3000!\");\n});\n</code></pre>"},{"location":"pages/passport-local/#conclusion","title":"Conclusion","text":"<p>In this section, we learned how to set up Passport and Passport's Local Strategy to authenticate users using a username and password.</p> <p>In the next tutorial, we will try to log in a user using the login form page that we created in the previous section.</p>"},{"location":"pages/project-structure/","title":"Project Structure","text":""},{"location":"pages/project-structure/#overview","title":"Overview","text":"<p>This section layouts the overall file directory structure of the login form project that we will be building.</p>"},{"location":"pages/project-structure/#working-directory-structure","title":"Working Directory Structure","text":"<pre><code>|-- login-form-tutorial              # Root Directory\n    |-- public                       # Public Directory\n            |-- style.css            # Style.css File\n    |-- views                        # Views Directory\n            |-- index.ejs            # Homepage Ejs File\n            |-- login.ejs            # Login Page Ejs File\n    | -- app.js                      # Express App File\n    |-- package.json                 # Package.json File\n    |-- node_modules                 # Node Modules Directory\n</code></pre> <p>Creating a directory structure like this will help us keep our project organized and easy to navigate.</p>"},{"location":"pages/project-structure/#1-create-the-project-directory","title":"1. Create the Project Directory","text":"<p>Open the terminal and type the following command:</p> <pre><code>mkdir login-form-tutorial\n</code></pre> <p>You will get no feedback, but this will create a directory called <code>login-form-tutorial</code>, which will hold all the files for the project.</p>"},{"location":"pages/project-structure/#2-navigate-to-the-project-directory","title":"2. Navigate to the Project Directory","text":"<pre><code>cd login-form-tutorial\n</code></pre> <p>This will navigate to the <code>login-form-tutorial</code> directory.</p> <p>Now that we have created the project directory, we can start installing the required Node modules.</p>"},{"location":"pages/project-structure/#installing-node-modules","title":"Installing Node Modules","text":"<p>In this section we will be installing the following Node modules:</p> <ul> <li>Express</li> <li>EJS</li> <li>Nodemon</li> </ul>"},{"location":"pages/project-structure/#1-create-a-packagejson-file","title":"1. Create a <code>package.json</code> File","text":"<pre><code>npm init -y\n</code></pre> <p>This will create a file called <code>package.json</code> inside the <code>login-form-tutorial</code> directory.</p> <p>This file is used to store all the project dependencies.</p>"},{"location":"pages/project-structure/#2-install-express","title":"2. Install Express","text":"<pre><code>npm install express\n</code></pre> <p>This will install the Express module. We will be using Express to create our server.</p> <p>Express is a minimalistic web framework for Node.js.</p>"},{"location":"pages/project-structure/#3-install-ejs","title":"3. Install EJS","text":"<pre><code>npm install ejs\n</code></pre> <p>This will install the EJS module.</p> <p>EJS is a templating engine that we will be using to render our HTML pages.</p>"},{"location":"pages/project-structure/#4-install-nodemon","title":"4. Install Nodemon","text":"<pre><code>npm install nodemon --save-dev\n</code></pre> <p>This will install the nodemon module and add it to the <code>package.json</code> file as a development dependency.</p> <p>Nodemon is a module that automatically restarts the server whenever a file is changed.</p>"},{"location":"pages/project-structure/#5-open-the-folder-in-vs-code","title":"5. Open the folder in VS Code","text":"<p>Navigate to the <code>login-form-tutorial</code> directory and open it in VS Code.</p>"},{"location":"pages/project-structure/#6-put-the-start-script-in-the-packagejson-file","title":"6. Put the <code>start</code> Script in the <code>package.json</code> File","text":"<p>In the <code>package.json</code> file, there is a section called <code>scripts</code>. This section is used to store all the scripts for the project.</p> <p>There should be a <code>test</code> script in the <code>scripts</code> section. Replace the <code>test</code> script with the following code:</p> <pre><code>\"scripts\": {\n\"start\": \"nodemon app.js\"\n},\n</code></pre> <p>This will add the <code>start</code> script to the <code>package.json</code> file. This script will allow us to type <code>npm start</code> in the terminal and start the server.</p> <p>This will make it easier for us to start the server insteading of typing <code>nodemon app.js</code> in the terminal we can just use <code>npm start</code>.</p> <p>In the next section, we will be setting up the project directory.</p>"},{"location":"pages/project-structure/#setting-up-the-project-directory","title":"Setting up the Project Directory","text":"<p>Now that we have finished installing the required node modules, we will be setting up the project directory.</p>"},{"location":"pages/project-structure/#1-create-the-public-directory","title":"1. Create the <code>public</code> Directory","text":"<pre><code>mkdir public\n</code></pre> <p>This will create a directory called <code>public</code>, which will hold all the static files for the project.</p> <p>What are static files?<p>Static files are files that are not rendered by the server, such as images, CSS files, and JavaScript files.</p> <p>For more information on static files, check out the Express documentation.</p> </p>"},{"location":"pages/project-structure/#2-creating-the-stylecss-file","title":"2. Creating the Style.css File","text":"<p>Create a file called <code>style.css</code> in the <code>public</code> directory.</p>"},{"location":"pages/project-structure/#3-creating-the-views-directory","title":"3. Creating the Views Directory","text":"<pre><code>mkdir views\n</code></pre> <p>This will create a directory called <code>views</code>, which will hold all the ejs files for the project.</p>"},{"location":"pages/project-structure/#4-creating-the-homepage-ejs-file","title":"4. Creating the Homepage Ejs File","text":"<p>Create a file called <code>index.ejs</code> in the <code>views</code> directory. This file will be the homepage for the project.</p>"},{"location":"pages/project-structure/#5-creating-the-login-page-ejs-file","title":"5. Creating the Login Page Ejs File","text":"<p>Create a file called <code>login.ejs</code> in the <code>views</code> directory. This file will be the login page for the project.</p>"},{"location":"pages/project-structure/#6-creating-the-express-app-file","title":"6. Creating the Express App File","text":"<p>Create a file called <code>app.js</code> in the root directory. This file will hold all the code for the Express app.</p> <p>We will be writing the code for the Express app in the next section.</p>"},{"location":"pages/project-structure/#conclusion","title":"Conclusion","text":"<p>In this section, we created the project directory and installed the required Node modules.</p> <p>In the next section, we will setup the Express server.</p>"},{"location":"pages/troubleshoot/","title":"Troubleshooting","text":""},{"location":"pages/troubleshoot/#error-cannot-find-module-users","title":"Error: Cannot find module './users'","text":"<p>To fix this you need to make sure the path to the file is correct. If you are using a relative path, make sure it is correct.</p>"},{"location":"pages/troubleshoot/#typeerror-localstrategy-requires-a-verify-callback","title":"TypeError: LocalStrategy requires a verify callback","text":"<p>This error means that you are missing the verify callback function in the <code>passport.use</code> function.</p> <p>To fix this, add the verify callback function to the <code>passport.use</code> function such as the following:</p> <pre><code>passport.use(\nnew LocalStrategy((username, password, done) =&gt; {\n// ...\n})\n);\n</code></pre>"},{"location":"pages/troubleshoot/#error-already-included-file-name-in-path-differs-from-file-name-in-casing","title":"Error: Already included file name in path differs from file name in casing","text":"<p>This error means that the file name in the path is different from the actual file name. For example, if you have a file named <code>userDb.js</code> and you try to include it using <code>require('./userDB.js')</code>, you will get this error.</p> <p>To fix this, make sure the file name in the path is the same as the actual file name.</p> <p>If they are correct and your still getting this error, try refreshing VSCode by exiting it and opening it again.</p>"}]}